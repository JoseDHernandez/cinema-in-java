/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Templates;

import Classes.Movie;
import Classes.Showtime;
import Classes.Theater;
import Classes.Window;
import com.mycompany.cuevadeana.Mongo;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jose
 */
public class RegisterShowtimes extends javax.swing.JPanel implements Resolution {

    private Mongo mongoDB;
    private Theater theater = new Theater();
    private List<Movie> movies;
    private final int delayTime = 20; // Tiempo entre funciones
    private final int openTime = 7; // Hora de apertura
    Window window = new Window();

    /**
     * Crea un nuevo formulario RegisterShowtimes.
     *
     * @param client El cliente de MongoDB.
     */
    public RegisterShowtimes(Mongo client) {
        initComponents();
        mongoDB = client;
        getMovieTitles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        TheaterFeatures = new javax.swing.JComboBox<>();
        DateChooser = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        AddButton = new javax.swing.JButton();
        ListMovies = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setMinimumSize(DEF_RESOLUTION);

        jPanel1.setBackground(new java.awt.Color(255, 102, 102));
        jPanel1.setPreferredSize(new java.awt.Dimension(1024, 768));

        jLabel1.setFont(new java.awt.Font("Ebrima", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Registro de funci칩n de  peliculas");

        jLabel2.setFont(new java.awt.Font("Ebrima", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Pelicula");

        jLabel3.setFont(new java.awt.Font("Ebrima", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Sala");

        TheaterFeatures.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Sala 1    - 2D", "Sala 2    - 2D - CC", "Sala 3    - 2D ", "Sala 4    - 3D", "Sala 5    - 3D - CC", "Sala 6    - 3D", "Sala 7    - 4D - CC", "Sala 8    - 4D", "Sala 9    - 4D", " " }));

        jLabel4.setFont(new java.awt.Font("Ebrima", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Fecha");

        AddButton.setFont(new java.awt.Font("Ebrima", 1, 20)); // NOI18N
        AddButton.setForeground(new java.awt.Color(255, 102, 102));
        AddButton.setText("A침adir");
        AddButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddButtonMouseClicked(evt);
            }
        });
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        ListMovies.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pelicula", "Inicio", "Fin", "Duraci칩n"
            }
        ));
        jScrollPane1.setViewportView(Table);

        jButton1.setBackground(new java.awt.Color(255, 102, 102));
        jButton1.setFont(new java.awt.Font("Ebrima", 1, 20)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Registrar funci칩n");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        jLabel5.setText("Listado de las peliculas agregadas al horario");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 2, 10)); // NOI18N
        jLabel6.setText("*Los horarios tienen adicionado el tiempo entre proyecciones de 20 minutos y el horario es de 7 A.M. a 11 P.M.");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap(152, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(20, 20, 20))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(33, 33, 33)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1)
                        .addGap(86, 86, 86))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TheaterFeatures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ListMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)))
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ListMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(TheaterFeatures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(DateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(114, 114, 114))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1140, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void getMovieTitles() {
        movies = mongoDB.getMovies(0, 0);
        if (movies.isEmpty()) {
            ListMovies.removeItemAt(0);
            ListMovies.addItem("No hay peliculas disponibles");
            ListMovies.setSelectedIndex(0);
        } else {
            for (Movie movie : movies) {
                ListMovies.addItem(movie.getTitle());
            }
        }
    }

    private void updateTable() {
        DefaultTableModel modelo = (DefaultTableModel) Table.getModel();
        modelo.setRowCount(0);
        for (Showtime showtime : theater.getShowtimes()) {
            Object[] row = {showtime.getMovie(), showtime.getStartHour(), showtime.getEndHour(), showtime.getDuration()};
            modelo.addRow(row);
        }
    }

    private void registerShow() {
        Date date = DateChooser.getDate();
        if (date != null) {
            if (theater.getDate() == null) {
                //Bloquear DateChooser
                DateChooser.setEnabled(false);
                //Ingreasar fecha
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                String dateString = sdf.format(date);
                theater.setDate(dateString);
                /*
            Sala 1    - 2D
            Sala 2    - 2D - CC
            Sala 3    - 2D 
            Sala 4    - 3D
            Sala 5    - 3D - CC
            Sala 6    - 3D
            Sala 7    - 4D - CC
            Sala 8    - 4D
            Sala 9    - 4D
                 */
                //Bloquear selecto de sala
                TheaterFeatures.setEnabled(false);
                //Establecer caracteristicas
                String features = "";
                int temp = TheaterFeatures.getSelectedIndex();
                if (temp >= 1 && temp <= 3) {
                    features += "2D";
                } else if (temp >= 2 && temp <= 6) {
                    features += "3D";
                } else if (temp >= 7 && temp <= 9) {
                    features += "4D";
                }
                if (temp == 2 || temp == 5 || temp == 7) {
                    features += ", CC";
                }
                theater.setFeatures(features);
                //Obtener nombre de la sala
                String[] salas = TheaterFeatures.getSelectedItem().toString().split(" ");
                theater.setName(salas[0] + " " + salas[1]);

            }
            //Validar que haya una pelicula seleccionada
            if (ListMovies.getSelectedIndex() != 0) {
                Showtime showtime = new Showtime();
                int index = -1;
                for (int i = 0; i < movies.size(); i++) {
                    if (movies.get(i).getTitle().equals(ListMovies.getSelectedItem().toString())) {
                        index = i;
                        break;
                    }
                }
                if (index != -1) {
                    Movie movie = movies.get(index);
                    showtime.setMovie(movie);
                    //Calculo de horas
                    LocalTime startTime;
                    LocalTime endTime;
                    //Calcula la hora de la primer funcion
                    if (theater.getShowtimes().isEmpty()) {
                        //Inicia las proyecciones , segun openTime
                        startTime = LocalTime.of(openTime, 0);
                        endTime = startTime.plusMinutes(movie.getDuration());
                    } else {
                        //Obtener ultima funcion
                        startTime = theater.getShowtimes().getLast().getEndHour();
                        //Tiempo entre funcion
                        startTime = startTime.plusMinutes(delayTime);
                        endTime = startTime.plusMinutes(movie.getDuration());
                    }
                    //Comprar si la pelicula no pasa de las 11 PM
                    int end = endTime.getHour(), start = startTime.getHour();
                    if ((start >= 0 && start < openTime || start >= 23) || (end >= 0 && end < openTime || end >= 23)) {
                        Window.Message("warning", "Ya no se pueden agregar mas peliculas porque se supera el limite de horario", "Limite de horario");
                    } else {
                        showtime.setStartHour(startTime);
                        showtime.setEndHour(endTime);
                        //a침adir showtime en Theater
                        theater.addShowtime(showtime);
                        //Deseleccionar pelicula
                        ListMovies.setSelectedIndex(0);
                        //Actualizar tabla
                        updateTable();
                        Window.Message("info", "Pelicula a침adida", "Pelicula registrada en la funcion");
                    }
                }

            } else {
                Window.Message("warning", "Pelicula no seleccionada", "Pelicula no seleccionada");
            }
        } else {
            Window.Message("warning", "Fecha no seleccionada", "Fecha no seleccionada");
        }

    }

    private void enableInputs() {
        TheaterFeatures.setSelectedIndex(0);
        TheaterFeatures.setEnabled(true);
        DateChooser.setDate(null);
        DateChooser.setEnabled(true);
    }

    //Guardar en la base de datos
    private void saveShowtime() {
        if (!theater.getShowtimes().isEmpty()) {
            try {
                //Validar si ya existe un registro del mismo dia
                System.out.println("Date: " + theater.getDate());
                if (mongoDB.findTheater(theater.getName(), theater.getDate()) == null) {
                    mongoDB.insert(theater);
                    mongoDB.closeConnection();
                    //Limpiar datos
                    theater = new Theater();
                    enableInputs();
                    updateTable();
                } else {
                    Window.Message("danger", "Fecha ya registrada", "Error en registrar funcion");
                    enableInputs();
                }

            } catch (Exception ex) {
                Window.Message("danger", ex.toString(), "Error en registrar funcion");
            }
        }
    }
    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddButtonActionPerformed

    private void AddButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddButtonMouseClicked
        // TODO add your handling code here:
        registerShow();
    }//GEN-LAST:event_AddButtonMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        saveShowtime();
    }//GEN-LAST:event_jButton1MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private com.toedter.calendar.JDateChooser DateChooser;
    private javax.swing.JComboBox<String> ListMovies;
    private javax.swing.JTable Table;
    private javax.swing.JComboBox<String> TheaterFeatures;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
